import random

import request
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.filters import BaseFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import keyboard as kb
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import config as cf
from middleeware import MediaMiddlewareCountClick
import text

router = Router()


class Form(StatesGroup):
    get_fullname = State()
    get_city = State()
    get_selfcat = State()
    get_selfsubcat = State()
    no_city = State()
    phone = State()
    price = State()
    promo_link = State()


class Question(StatesGroup):
    get_question = State()


class UpdateBase(StatesGroup):
    get_id = State()
    get_promo_link = State()
    get_price = State()


class Update(StatesGroup):
    get_fullname = State()
    get_city = State()
    get_phone = State()


class ADMIN(StatesGroup):
    search_user = State()
    advertisement = State()
    user_id = State()


class CityCheck(BaseFilter):
    async def __call__(self, callbeck: CallbackQuery):
        for i in cf.city:
            if callbeck.data == i and i not in currentCity:
                print("yes")
                currentCity.append(i)
                return callbeck.data == i
        else:
            return False


class CityChecksearch(BaseFilter):
    async def __call__(self, callbeck: CallbackQuery):
        for i in cf.city2:
            if callbeck.data == i and i not in currentCity:
                print("yes")
                currentCity.append(i)
                return callbeck.data == i
        else:
            return False


class CatCheck(BaseFilter):
    async def __call__(self, callbeck: CallbackQuery):
        for i in cf.self_cat:
            if callbeck.data == i:
                return callbeck.data == i
        else:
            return False


class CatChecksearch(BaseFilter):
    async def __call__(self, callbeck: CallbackQuery):
        for i in cf.self_cat2:
            if callbeck.data == i:
                return callbeck.data == i
        else:
            return False


class SubCatCheck(BaseFilter):
    async def __call__(self, callbeck: CallbackQuery):
        for i in cf.self_subcat:
            if callbeck.data == i:
                return callbeck.data == i
        else:
            return False


class SubCatChecksearch(BaseFilter):
    async def __call__(self, callbeck: CallbackQuery):
        for i in cf.self_subcat2:
            if callbeck.data == i:
                return callbeck.data == i
        else:
            return False


currentCity = []


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    currentCity.clear()
    await state.clear()
    res = await request.check_user(message.from_user.id, bot)
    print(message.from_user.id)
    if message.from_user.id == cf.ADMIN_ID:
        await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—åüíª", reply_markup=kb.admin_panel)
    elif res == "user":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=kb.startuser_kb)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=kb.startprofi_kb)


@router.callback_query(F.data == "search user")
async def cmd_search_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ADMIN.search_user)
    await callback.message.edit_text("ü§ñ–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.message(ADMIN.search_user)
async def get_search_user(message: Message, state: FSMContext):
    try:
        data = message.text
        res = await request.seach_profi(data)
        count = 0
        msg = f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data}\nUserName: @<b>{res[0][2]}</b>\n–ò–º—è –§–∞–º–∏–ª–∏—è: <b>{res[0][3]}</b>\n–ì–æ—Ä–æ–¥: <b>{res[0][4]}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{res[0][8]}</b>\n"
        for i in res:
            count += 1
            msg += f"<b>{count}.</b>\n"
            text = f"–ß–∞—Ç –≥–æ—Ä–æ–¥–∞: {i[5]}\n  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {i[6]}\n  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {i[7]}\n  –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ: {i[9]}\n  –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥: {i[10]}\n"
            msg += text
        await message.answer(msg, parse_mode="HTML")
    except Exception:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –∞–π–¥–∏")


@router.callback_query(F.data == "trustedpartners")
async def cmd_trustedpartners(callback: CallbackQuery):
    print(callback.from_user.id)
    await callback.message.edit_text(text.text_question, reply_markup=kb.trusted_partners, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "cooperation")
async def cmd_cooperation(callback: CallbackQuery):
    await callback.message.edit_text(text.text_cooperation, reply_markup=kb.trusted_partners, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "registration in the chat")
async def cmd_registration(callback: CallbackQuery):
    await callback.message.edit_text(text.reg_stage1, reply_markup=kb.registration, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "Startuser")
async def cmd_startuser(callback: CallbackQuery, state: FSMContext):
    currentCity.clear()
    await state.clear()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=kb.startuser_kb)
    await callback.answer()


@router.callback_query(F.data == "Startprofi")
async def cmd_startuser(callback: CallbackQuery, state: FSMContext):
    currentCity.clear()
    await state.clear()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=kb.startprofi_kb)
    await callback.answer()


@router.callback_query(F.data == "go1")
async def cmd_go1(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç?", reply_markup=kb.go1, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "nospecialist")
async def cmd_nospecialist(callback: CallbackQuery):
    await callback.message.edit_text(text.text_nospecialist, reply_markup=kb.no_specialist, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "go2")
async def cmd_go2(callback: CallbackQuery):
    await callback.message.edit_text(text.reg_stage2, reply_markup=kb.go2, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "go3")
async def cmd_go3(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚û°Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ)", reply_markup=None)
    await state.set_state(Form.get_fullname)
    await callback.answer()


@router.message(Form.get_fullname)
async def cmd_go4(message: Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await state.set_state(Form.get_city)
    print(1)
    await message.answer("‚û°Ô∏è –ì–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")


@router.message(Form.get_city)
async def cmd_go5(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer(text.chat_city_text, reply_markup=kb.city_keyboard, parse_mode="HTML")
    await state.set_state(None)


@router.callback_query(CityCheck())
async def cmd_chat_city(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    msg = f"{text.chat_city_text}\n –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
    for i in range(len(currentCity)):
        if currentCity[i] in cf.city_rus:
            msg += f"{i + 1}. {cf.city_rus[currentCity[i]]}\n"
        else:
            msg += f"{i + 1}. {currentCity[i]}\n"
    print(msg)
    await callback.message.edit_text(f'{msg}\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤, –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"',
                                     reply_markup=kb.city_keyboard2)


@router.callback_query(F.data == "city_add")
async def cmd_add_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text.text_no_city)
    await state.set_state(Form.no_city)
    await callback.answer()


@router.callback_query(F.data == "search")
async def cmd_all_search(callback: CallbackQuery):
    await callback.message.edit_text(text.text_find_a_specialist, reply_markup=kb.find_specialist)
    await callback.answer()


@router.callback_query(F.data == "all chat")
async def cmd_all_chat(callback: CallbackQuery):
    await callback.message.edit_text(text.all_chat_text, reply_markup=await kb.all_chat_kb(callback.from_user.id))
    await callback.answer()


@router.callback_query(F.data == "individual selection")
async def cmd_individual_selection(callback: CallbackQuery):
    await callback.message.edit_text(text.select, reply_markup=kb.trusted_partners)
    await callback.answer()


@router.message(Form.no_city)
async def cmd_no_city(message: Message, state: FSMContext, bot: Bot):
    currentCity.append(message.text)
    await message.answer("ü§ñ–Ø –ø—Ä–µ–¥–ª–æ–∂—É –º–µ–Ω–Ω–µ–¥–∂–µ—Ä—É –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–æ–∫")
    await bot.send_message(cf.ADMIN_ID, f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≥–æ—Ä–æ–¥–∞"
                                        f"-> <b>{currentCity[-1]}</b>", parse_mode="HTML")
    msg = f"{text.chat_city_text}\n –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
    for i in range(len(currentCity)):
        if currentCity[i] in cf.city_rus:
            msg += f"{i + 1}. {cf.city_rus[currentCity[i]]}\n"
        else:
            msg += f"{i + 1}. {currentCity[i]}\n"
    print(msg)
    await message.answer(f'{msg}\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤, –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"',
                         reply_markup=kb.city_keyboard2)
    await state.set_state(None)


@router.callback_query(F.data == "go5")
async def cmd_go6(callback: CallbackQuery):
    await callback.message.edit_text("‚û°Ô∏è –ö–∞–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–¥ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?",
                                     reply_markup=kb.self_cat_keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(CatCheck())
async def cmd_chat_city(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(self_cat=callback.data)
    await callback.message.edit_text("‚û°Ô∏è–ö–∞–∫–∞—è –≤–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è?", reply_markup=kb.self_subcat_keyboard)


@router.callback_query(F.data == "look")
async def cmd_look(callback: CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    res = await request.seach_profi(user_id)
    count = 0
    msg = f"‚û°Ô∏è –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞ - —Å–æ–≥–ª–∞—Å–∏–µ\n–ò–º—è –§–∞–º–∏–ª–∏—è: <b>{res[0][3]}</b>\n–ì–æ—Ä–æ–¥: <b>{res[0][4]}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{res[0][8]}</b>\n"
    for i in res:
        count += 1
        msg += f"<b>{count}.</b>\n"
        text = f"–ß–∞—Ç –≥–æ—Ä–æ–¥–∞: {i[5]}\n  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {i[6]}\n  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {i[7]}\n  –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ: {i[9]}\n  –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥: {i[10]}\n"
        msg += text
    await callback.message.edit_text(msg, reply_markup=kb.update_data_kb, parse_mode="HTML")


@router.callback_query(SubCatCheck())
async def cmd_phone(callback: CallbackQuery, state: FSMContext):
    await state.update_data(self_subcat=callback.data)
    await callback.message.edit_text("‚û°Ô∏è –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", reply_markup=None)
    await callback.answer()
    await state.set_state(Form.phone)


@router.callback_query(F.data == "update")
async def cmd_update(callback: CallbackQuery):
    await callback.message.edit_text("ü§ñ–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb.update_data_kb2)
    await callback.answer()


@router.callback_query(F.data == "updatefullname")
async def cmd_updatefullname(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏–∏(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ)")
    await state.set_state(Update.get_fullname)
    await callback.answer()


@router.message(Update.get_fullname)
async def newfullname(message: Message, bot: Bot):
    new = message.text
    user_id = message.from_user.id
    await request.update_profi_fullname(new, user_id)
    await bot.send_message(cf.ADMIN_ID, f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –∞–π–¥–∏ = <b>{user_id}</b> –ø–æ–º–µ–Ω—è–ª –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –Ω–∞ {new}", parse_mode="HTML")
    await message.answer("ü§ñ–ò–º—è –∏ –§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                           [[InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                                                  callback_data="Startprofi")]]))


@router.callback_query(F.data == "updatecity")
async def cmd_updatecity(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞")
    await state.set_state(Update.get_city)
    await callback.answer()


@router.message(Update.get_city)
async def newcity(message: Message, bot: Bot):
    new = message.text
    user_id = message.from_user.id
    await request.update_profi_city(new, user_id)
    await bot.send_message(cf.ADMIN_ID, f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –∞–π–¥–∏ = <b>{user_id}</b> –ø–æ–º–µ–Ω—è–ª –≥–æ—Ä–æ–¥ –Ω–∞ {new}", parse_mode="HTML")
    await message.answer("ü§ñ–ò–º—è –≥–æ—Ä–æ–¥–∞ –∏–∑–º–µ–Ω–∏–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                           [[InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                                                  callback_data="Startprofi")]]))


@router.callback_query(F.data == "updatephone")
async def cmd_updatephone(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(Update.get_phone)
    await callback.answer()


@router.message(Update.get_phone)
async def newphone(message: Message, bot: Bot):
    new = message.text
    user_id = message.from_user.id
    await request.update_profi_phone(new, user_id)
    await bot.send_message(cf.ADMIN_ID, f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –∞–π–¥–∏ = <b>{user_id}</b> –ø–æ–º–µ–Ω—è–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ {new}", parse_mode="HTML")
    await message.answer("ü§ñ–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                           [[InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                                                  callback_data="Startprofi")]]))


@router.callback_query(F.data == "pro search")
async def cmd_pro_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏—â–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞?", reply_markup=kb.city_keyboard3)
    await callback.answer()


@router.callback_query(CityChecksearch())
async def cmd_city_search(callback: CallbackQuery, state: FSMContext):
    res = cf.city_rus[callback.data[0:-1]]
    print(res)
    await state.update_data(city_search=res)
    await callback.message.edit_text("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ –∫–∞–∫–æ–≥–æ —Ä–æ–¥–∞ —É—Å–ª—É–≥ –≤—ã –∏—â–µ—Ç–µ?", reply_markup=kb.self_cat_keyboard2)


@router.callback_query(CatChecksearch())
async def cmd_selfcat_search(callback: CallbackQuery, state: FSMContext):
    print(callback.data[0:-1])
    res = cf.self_cat2[callback.data]
    await state.update_data(self_cat_search=res)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.self_subcat_keyboard2)


@router.callback_query(SubCatChecksearch())
async def cmd_selfsubcat_search(callback: CallbackQuery, state: FSMContext):
    res = cf.self_subcat2[callback.data]
    await state.update_data(self_subcat_search=res)
    data = await state.get_data()
    sets = set()
    try:
        res = await request.seach_Pro(data["city_search"], data["self_cat_search"], data["self_subcat_search"])
        for i in range(5):
            sets.add(random.choice(res))
        msg = "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏:\n"
        count = 0
        for i in sets:
            count += 1
            msg += f"{count}. {i[1]}: {i[0]}"
            print(msg)
        await callback.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                                                [[InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –µ—â–µ",
                                                                                                       callback_data="repead")]]))
    except Exception:
        await callback.message.edit_text("ü§ñ–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å",
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                                           [[InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                                                                  callback_data="Startprofi")]]))


@router.callback_query(F.data == "repead")
async def cmd_repead(callback: CallbackQuery, state: FSMContext, bot: Bot, count_click: int):
    data = await state.get_data()
    sets = set()
    if count_click > 2:
        await bot.send_message(cf.ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ = {callback.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–π—Ç–∏ –µ—â–µ'"
                                            f"–±–æ–ª—å—à–µ 2 —Ä–∞–∑")
    try:
        res = await request.seach_Pro(data["city_search"], data["self_cat_search"], data["self_sub_cat_search"])
        for i in range(5):
            sets.add(random.choice(res))
        msg = "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏:\n"
        count = 0
        for i in sets:
            count += 1
            msg += f"{count}. {i[1]}: {i[0]}"
            print(msg)
        await callback.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                                                [[InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –µ—â–µ",
                                                                                                       callback_data="repead")]]))
    except Exception:
        await callback.message.edit_text("ü§ñ–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å",
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                                                           [[InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                                                                  callback_data="Startprofi")]]))


@router.message(Form.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üí∏ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ (—Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É)")
    await state.set_state(Form.price)


@router.message(Form.price)
async def price_cmd(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer(text.promo_link_text, reply_markup=kb.promo_link)


@router.callback_query(F.data == "link")
async def cmd_link(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.promo_link)
    await callback.message.edit_text("–û—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—åüëá")
    await callback.answer()


@router.callback_query(F.data == "pass")
async def cmd_pass(callback: CallbackQuery, state: FSMContext):
    await state.update_data(promo_link="")
    await callback.message.edit_text(text.chat_rules, reply_markup=kb.chat_rules)
    await callback.answer()


@router.message(Form.promo_link)
async def promo_link_cmd(message: Message, state: FSMContext):
    await state.update_data(promo_link=message.text)
    await message.answer(text.chat_rules, reply_markup=kb.chat_rules)


@router.callback_query(F.data == "chat rules")
async def cmd_chat_rules(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        full_name = data["fullname"]
        city = data["city"]
        chat_city = ", ".join([cf.city_rus[i] for i in currentCity if i in cf.city_rus])
        phone = data["phone"]
        self_cat = cf.self_cat[data["self_cat"]]
        self_subcat = cf.self_subcat[data["self_subcat"]]
        promo_link = data["promo_link"]
        price = data["price"]
        await callback.message.edit_text(
            text.set_chat_rules(full_name, city, chat_city, phone, self_cat, self_subcat, promo_link, price),
            reply_markup=kb.open_rules)
    except Exception as ex:
        print(ex)
        await callback.message.edit_text(
            "ü§ñ–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø–æ–≤—Ç–∞—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
    await callback.answer()


@router.callback_query(F.data == "read and agree")
async def cmd_read_and_agree(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        full_name = data["fullname"]
        city = data["city"]
        chat_city = [cf.city_rus[i] for i in currentCity if i in cf.city_rus]
        phone = data["phone"]
        self_cat = cf.self_cat[data["self_cat"]]
        self_subcat = cf.self_subcat[data["self_subcat"]]
        promo_link = data["promo_link"]
        price = data["price"]
        user_name = callback.from_user.username
        user_id = callback.from_user.id
        for item in chat_city:
            await request.add_profi(user_name, user_id, full_name, city, item, phone, self_cat, self_subcat, promo_link,
                                    price)
            await bot.send_message(cf.ADMIN_ID,
                                   f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç - @{callback.from_user.username} "
                                   f"-> <b>{full_name}</b>", parse_mode="HTML")
        await callback.message.edit_text(text.text_add_base, reply_markup=await kb.add_base_kb(user_id))
    except Exception:
        await callback.message.edit_text(
            "ü§ñ–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø–æ–≤—Ç–∞—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
        await callback.answer()


@router.callback_query(F.data == "subscription")
async def cmd_subscription(callback: CallbackQuery):
    await callback.message.edit_text(text.info_subscribe, reply_markup=kb.subscribe_info, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("Evento"))
async def cmd_dont_subscribe(callback: CallbackQuery):
    await callback.message.edit_text(text.no_subscribe, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ú–µ–Ω—é",
                                               callback_data="Startprofi")]]))
    await callback.answer()


@router.callback_query(F.data == "advertisement")
async def cmd_advertisement(callback: CallbackQuery):
    await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–º—É?", parse_mode="HTML", reply_markup=kb.admin_panel2)
    await callback.answer()


@router.callback_query(F.data == "all advertisement")
async def advertisement2(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ADMIN.advertisement)
    await callback.message.edit_text("ü§ñ–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è")


@router.message(ADMIN.advertisement)
async def alladvertisement(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    msg = message.text
    await state.clear()
    if "user_id" in data:
        try:
            await bot.send_message(data["user_id"], f"{msg}\n ‚ö´Ô∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ë–æ—Ç–∞‚ö´Ô∏è")
            await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        except Exception:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        try:
            idies = await request.seach_user_all()
            for i in idies:
                await bot.send_message(i[0], f"{msg}\n ‚ö´Ô∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ë–æ—Ç–∞‚ö´Ô∏è")
            await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        except Exception:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "user advertisement")
async def advertisement3(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ADMIN.user_id)
    await callback.message.edit_text("ü§ñ–Ω–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")


@router.message(ADMIN.user_id)
async def useradvertisement(message: Message, state: FSMContext):
    await state.update_data(user_id=message.text)
    await state.set_state(ADMIN.advertisement)
    await message.answer("ü§ñ–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è")


@router.callback_query(F.data == "updatebase")
async def update_base_cmd(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    res = await request.seach_profi(user_id)
    count = 0
    ids = []
    msg = f"–ó–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ —Å–ø–µ—Ü–æ–≤:\n "
    for i in res:
        ids.append(i[0])
        count += 1
        msg += f"<b>{count}.</b>\n"
        text = f"–ß–∞—Ç –≥–æ—Ä–æ–¥–∞: {i[5]}\n  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {i[6]}\n  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {i[7]}\n  –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ: {i[9]}\n  –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥: {i[10]}\n"
        msg += text
    msg += "<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∑–∞–ø–∏—Å–µ–π –≤ –Ω–∞—à–µ–π –±–∞–∑–µ. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ üëÜ</b>"
    await callback.message.edit_text(msg, parse_mode="HTML")
    await state.set_state(UpdateBase.get_id)


@router.message(UpdateBase.get_id)
async def update_base_get_id(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        res = await request.seach_profi(user_id)
        count = 0
        ids = []
        for i in res:
            ids.append(i[0])
            count += 1
        data = int(message.text)
        if 1 <= data <= len(ids):
            await message.answer("–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb.update_base)
            await state.update_data(id=data)
        else:
            raise Exception
    except Exception:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.callback_query(F.data == "update_promo_link")
async def update_base_promo_link(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–º–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    await state.set_state(UpdateBase.get_promo_link)


@router.message(UpdateBase.get_promo_link)
async def update_get_base_promo_link(message: Message, state: FSMContext, bot: Bot):
    data = message.text
    id = (await state.update_data())["id"]
    await request.update_profi_promo_link(data, id)
    await bot.send_message(cf.ADMIN_ID,
                           f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –∞–π–¥–∏ = <b>{message.from_user.id}</b> –ø–æ–º–µ–Ω—è–ª —Ü–µ–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–º–æ —Å –∞–π–¥–∏ {id} –Ω–∞ {data}",
                           parse_mode="HTML")
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")


@router.callback_query(F.data == "update_price")
async def update_base_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É")
    await state.set_state(UpdateBase.get_price)


@router.message(UpdateBase.get_price)
async def update_get_base_price(message: Message, state: FSMContext, bot: Bot):
    data = message.text
    id = (await state.update_data())["id"]
    await request.update_profi_price(data, id)
    await bot.send_message(cf.ADMIN_ID, f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –∞–π–¥–∏ = <b>{message.from_user.id}</b> –ø–æ–º–µ–Ω—è–ª —Ü–µ–Ω—É –∑–∞ —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ —Å –∞–π–¥–∏ {id} –Ω–∞ {data}",
                           parse_mode="HTML")
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")

@router.callback_query(F.data == "question")
async def update_base_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
    await state.set_state(Question.get_question)


@router.message(Question.get_question)
async def update_get_base_price(message: Message, state: FSMContext, bot: Bot):
    data = message.text
    await bot.send_message(cf.ADMIN_ID, f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ = {message.from_user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å</b>:\n{data}", parse_mode="HTML")
    await message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")


@router.message(F.text.lower() == "—Ç–µ—Å—Ç—Ä–µ—Ñ")
async def test_ref(message: Message):
    await message.answer(text.testref)
